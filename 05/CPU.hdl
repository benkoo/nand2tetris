// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // First create variable names for each of the “instruction” bits.
    // The names of these bits tries to follow TECS book.

    //When instruction[15]==0, this instruction is an A-instruction
    //when instruction[15]==1, this is a C-instruction. 

    Mux16(a=false, b=instruction, sel=instruction[15], 
	out[0]=j3, out[1]=j2, out[2]=j1, 
	out[3]=d3, out[4]=d2, out[5]=d1, 
	out[6]=c6, out[7]=c5, out[8]=c4, out[9]=c3, out[10]=c2, out[11]=c1, 
	out[12]=compAbit); 



    //when d1 ==1, store the ALU computed result to ARegister
    Mux16(a=instruction, b=ALUOut, sel=d1, out=ARegIn);

    //When instruction[15]==0, isAInstruction==1;
    Not(in=instruction[15], out=isAInstruction);
    Or(a=d1, b=isAInstruction, out=loadAReg);
    ARegister(in=ARegIn, load=loadAReg, out[0..14]=addressM, out=ARegOut);


    //when d2 ==1, store the ALU computed result to DRegister
    DRegister(in=ALUOut, load=d2, out=aluX);

    //When this is a C-instruction, and d3==1, write to memory
    And(a=instruction[15], b=d3, out=writeM);



    //Controlling bits


    //when compAbit==1, switch to load inM data
    Mux16(a=ARegOut, b=inM, sel=compAbit, out=aluY);




	
    //Addressing bits
    //Use logic gates to determine whether to jump or not
    //with the 3 j-bits of the C-instruction jump field.

    // First test the out result and create jump conditions using And gates
    And(a=j1, b=ng, out=j1-outng);
    And(a=j2, b=zr, out=j2-outzr);

    //Must determine whether ALU output is greater than zero or not 
    //by negating the Or result of ng and zr. If output is NOT ng and NOT zr,
    // then, it must be greater than zero.
    Or(a=ng, b=zr, out=not-greaterThanZero);
    Not(in=not-greaterThanZero, out=out-greaterzr);

    //Now, determine whether j3 and output of ALU are greater than zero.
    And(a=j3, b=out-greaterzr, out=j3-out-greater);

    //Here, perform the Or operations to determine whether to jump or not.
    Or(a=j1-outng, b=j2-outzr, out=j12-jump);
    Or(a=j12-jump, b=j3-out-greater, out=pc-jump);

    PC(in=ARegOut, reset=reset, load=pc-jump, inc=true, out[0..14]=pc);
	


    //Data Bits
    //Using the 6 c-bits of the C-instruction compute field to configure ALU.
    ALU(x=aluX, y=aluY, 
	zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, 
	zr=zr, ng=ng, 
	out=outM, out=ALUOut);

}